//Schedular class

global class EmailToOpportunityBatch implements Schedulable{
    global void execute(SchedulableContext sc){
        date day = system.today().addDays(-30);
        List<Opportunity> oppMailCollection=[Select OwnerId,Owner.Email from Opportunity where LastModifiedDate<=:day];
        For(Opportunity oppSingleRecord:oppMailCollection)
        {
       		 EmailManager.sendEmailToOwner(oppSingleRecord.Owner.Email, 'Trailhead', '123 body');
        }
  
        }    
}


//Mailing class

public class EmailManager {
    
    @future(callout=true)
    public static void sendEmailToOwner(String address, String subject, String body)
    {
        sendMail(address,subject,body);
    }
    // Public method
    public static void sendMail(String address, String subject, String body) {
        // Create an email message object
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] {address};
        mail.setToAddresses(toAddresses);
        mail.setSubject(subject);
        mail.setPlainTextBody(body);
        // Pass this email message to the built-in sendEmail method 
        // of the Messaging class
        Messaging.SendEmailResult[] results = Messaging.sendEmail(
                                 new Messaging.SingleEmailMessage[] { mail });
        
        // Call a helper method to inspect the returned results
        inspectResults(results);
    }
    
    // Helper method
    private static Boolean inspectResults(Messaging.SendEmailResult[] results) {
        Boolean sendResult = true;
        
        // sendEmail returns an array of result objects.
        // Iterate through the list to inspect results. 
        // In this class, the methods send only one email, 
        // so we should have only one result.
        for (Messaging.SendEmailResult res : results) {
            if (res.isSuccess()) {
                System.debug('Email sent successfully');
            }
            else {
                sendResult = false;
                System.debug('The following errors occurred: ' + res.getErrors());                 
            }
        }
        
        return sendResult;
    }
}
